{"mappings":"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","sources":["node_modules/@swc/helpers/src/_array_with_holes.mjs","node_modules/@swc/helpers/src/_iterable_to_array.mjs","node_modules/@swc/helpers/src/_non_iterable_rest.mjs","node_modules/@swc/helpers/src/_array_like_to_array.mjs","node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs","node_modules/@swc/helpers/src/_sliced_to_array.mjs","src/index.ts"],"sourcesContent":["export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n","import _arrayLikeToArray from './_array_like_to_array.mjs';\n\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n    return _arrayLikeToArray(o, minLen);\n}\n","import arrayWithHoles from './_array_with_holes.mjs';\nimport iterableToArrayLimit from './_iterable_to_array.mjs';\nimport nonIterableRest from './_non_iterable_rest.mjs';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array.mjs';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n","import type { desmosRequire } from \"../DesModder/src/globals/window\";\r\nimport type { parseDesmosLatexRaw } from \"../DesModder/src/utils/depUtils\";\r\nimport type Node from \"../DesModder/src/parsing/parsenode\";\r\nimport type { ChildExprNode, Divide, Error, FunctionCall, Identifier } from \"../DesModder/src/parsing/parsenode\";\r\n\r\ndeclare global {\r\n  namespace Desmos {\r\n    const require: typeof desmosRequire;\r\n  }\r\n  interface Window {\r\n    Desmos: typeof Desmos;\r\n  }\r\n}\r\n\r\nconst display: {\r\n  [K in Node[\"type\"]]: string | globalThis.Node | ((node: Node & { type: K }) => string | globalThis.Node);\r\n} = {\r\n  \"Equation\": \"=\",\r\n  \"Assignment\": \"≝\",\r\n  \"FunctionDefinition\": \"ᶠ≝\",\r\n  \"Stats\": \"stats\",\r\n  \"BoxPlot\": \"boxplot\",\r\n  \"DotPlot\": \"dotplot\",\r\n  \"Histogram\": \"histogram\",\r\n  \"IndependentTTest\": \"ittest\",\r\n  \"TTest\": \"ttest\",\r\n  \"Regression\": \"~\",\r\n  \"Error\": \"\",\r\n  \"Constant\": constantToFraction,\r\n  \"MixedNumber\": constantToFraction,\r\n  \"DotAccess\": \".\",\r\n  \"FunctionCall\": symbolToElement,\r\n  \"FunctionExponent\": \"ᶠ^\",\r\n  \"FunctionFactorial\": \"ᶠ!\",\r\n  \"Identifier\": symbolToElement,\r\n  \"Integral\": \"∫\",\r\n  \"Derivative\": \"∂\",\r\n  \"Prime\": node => \"′\".repeat(node.order),\r\n  \"List\": \"[ ]\",\r\n  \"Range\": \"[...]\",\r\n  \"ListAccess\": \"A[n]\",\r\n  \"BareSeq\": \",\",\r\n  \"ParenSeq\": \"( , )\",\r\n  \"UpdateRule\": \"→\",\r\n  \"AssignmentExpression\": \"≔\",\r\n  \"ListComprehension\": \"[ for ]\",\r\n  \"OrderedPairAccess\": \".⁽ ⁾\",\r\n  \"Piecewise\": \"{ }\",\r\n  \"Product\": \"∏\",\r\n  \"Sum\": \"∑\",\r\n  \"SeededFunctionCall\": \"random\",\r\n  \"Add\": \"+\",\r\n  \"Subtract\": \"−\",\r\n  \"Multiply\": \"×\",\r\n  \"Divide\": node => {\r\n    const fraction = toFraction(node);\r\n    return fraction ? constantToFraction({ _constantValue: fraction }) : \"÷\";\r\n  },\r\n  \"Exponent\": \"^\",\r\n  \"Negative\": node => {\r\n    if (node.args[0].type === \"Identifier\" && node.args[0]._symbol === \"infty\") return \"-infty\";\r\n    if (node.args[0].type !== \"Divide\") return \"-\";\r\n    const fraction = toFraction(node.args[0]);\r\n    return fraction ? constantToFraction({ _constantValue: fraction }, true) : \"-\";\r\n  },\r\n  \"And\": \"⋂\",\r\n  \"Comparator['<']\": \"<\",\r\n  \"Comparator['>']\": \">\",\r\n  \"Comparator['<=']\": \"≤\",\r\n  \"Comparator['>=']\": \"≥\",\r\n  \"Comparator['=']\": \"=\",\r\n  \"Seed\": \"\",\r\n  \"ExtendSeed\": \"\",\r\n  \"DoubleInequality\": node => {\r\n    const fragment = document.createDocumentFragment();\r\n    const lhs = document.createElement(\"div\");\r\n    lhs.textContent = node.args[1].replace(\"<=\", \"≤\").replace(\">=\", \"≥\");\r\n    fragment.appendChild(lhs);\r\n    const rhs = document.createElement(\"div\");\r\n    rhs.textContent = node.args[3].replace(\"<=\", \"≤\").replace(\">=\", \"≥\");\r\n    fragment.appendChild(rhs);\r\n    return fragment;\r\n  },\r\n};\r\n\r\nfunction symbolToElement(node: Node & { _symbol: string }) {\r\n  if (node._symbol === \"factorial\") return \"!\";\r\n  const [lhs, rhs] = node._symbol.split(\"_\");\r\n  if (rhs) {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.appendChild(document.createTextNode(lhs!));\r\n    const sub = document.createElement(\"sub\");\r\n    sub.textContent = rhs;\r\n    fragment.appendChild(sub);\r\n    return fragment;\r\n  }\r\n  return lhs!;\r\n}\r\n\r\nfunction constantToFraction(\r\n  node: { _constantValue: boolean | number | { n: string | number; d: string | number } },\r\n  negate = false\r\n) {\r\n  const value = node._constantValue;\r\n  if (typeof value === \"object\") {\r\n    let n = value.n + \"\";\r\n    let d = value.d + \"\";\r\n    const sign = ((n[0] === \"-\") === (d[0] === \"-\")) !== negate;\r\n    n = n.replace(/^-/, \"\");\r\n    d = d.replace(/^-/, \"\");\r\n    if (d === \"1\") return (sign ? \"\" : \"-\") + n;\r\n    if (d === \"0\") return n === \"0\" ? \"undefined\" : (sign ? \"\" : \"-\") + \"infty\";\r\n    if (!n.includes(\"e\") && !d.includes(\"e\")) {\r\n      let diff = 0;\r\n      let v = +d;\r\n      while (v !== 1 && !(v % 5)) {\r\n        v /= 5;\r\n        diff++;\r\n      }\r\n      while (v !== 1 && !(v % 2)) {\r\n        v /= 2;\r\n        diff--;\r\n      }\r\n      if (v === 1) {\r\n        const m = diff < 0 ? 5 ** -diff : 2 ** diff;\r\n        n = +n * m + \"\";\r\n        d = +d * m + \"\";\r\n        return (\r\n          (sign ? \"\" : \"-\") +\r\n          (n.length < d.length\r\n            ? \"0.\" + \"0\".repeat(d.length - n.length - 1) + n\r\n            : n.slice(0, 1 - d.length) + \".\" + n.slice(1 - d.length)\r\n          ).replace(/\\.?0+$/, \"\")\r\n        );\r\n      }\r\n    }\r\n    const fraction = document.createElement(\"span\");\r\n    fraction.className = \"fraction\";\r\n    const numerator = document.createElement(\"span\");\r\n    numerator.textContent = n;\r\n    fraction.appendChild(numerator);\r\n    const denominator = document.createElement(\"span\");\r\n    denominator.textContent = d;\r\n    fraction.appendChild(denominator);\r\n    if (!sign) {\r\n      const fragment = document.createDocumentFragment();\r\n      fragment.appendChild(document.createTextNode(\"- \"));\r\n      fragment.appendChild(fraction);\r\n      return fragment;\r\n    }\r\n    return fraction;\r\n  }\r\n  return isNaN(value as number) ? \"undefined\" : value + \"\";\r\n}\r\n\r\nconst parse = Desmos.require(\"parser\").parse as typeof parseDesmosLatexRaw;\r\nconst calc = Desmos.GraphingCalculator(document.getElementById(\"calculator\")!, { pasteGraphLink: true });\r\ncalc.setExpression({ latex: \"x^{2}+y^{2}=10\" });\r\n\r\nconst count = document.getElementById(\"count\")!;\r\nconst tree = document.getElementById(\"tree\")!;\r\ncalc.observeEvent(\"change\", onChange);\r\nonChange();\r\n\r\nfunction onChange() {\r\n  const exp = calc\r\n    .getExpressions()\r\n    .find((exp): exp is Exclude<Desmos.ExpressionState, { type: \"table\" }> & { latex: string } => (exp as any).latex);\r\n  if (!exp) return onError();\r\n  tree.textContent = \"\";\r\n  const ul = document.createElement(\"ul\");\r\n  const node = parse(exp.latex, { allowDt: true, allowIndex: true });\r\n  if ((node as Error).isError) return onError();\r\n  ul.appendChild(recursion(node));\r\n  tree.appendChild(ul);\r\n  count.textContent = tree.getElementsByTagName(\"div\").length + \"\";\r\n}\r\n\r\nfunction onError() {\r\n  tree.textContent = \"\";\r\n  count.textContent = \"?\";\r\n}\r\n\r\nfunction recursion(node: Node): HTMLLIElement {\r\n  const li = document.createElement(\"li\");\r\n  const div = document.createElement(node.type === \"DoubleInequality\" ? \"span\" : \"div\");\r\n  const elementOrFn = display[node.type] as string | globalThis.Node | ((node: Node) => string | globalThis.Node);\r\n  const element = typeof elementOrFn === \"function\" ? elementOrFn(node) : elementOrFn;\r\n  div.textContent = \"\";\r\n  div.appendChild(typeof element === \"string\" ? document.createTextNode(element) : element);\r\n  li.appendChild(div);\r\n  const children = getChildren(node);\r\n  if (children.length) {\r\n    const ul = document.createElement(\"ul\");\r\n    children.forEach(child => ul.appendChild(recursion(child)));\r\n    li.appendChild(ul);\r\n  }\r\n  return li;\r\n}\r\n\r\nfunction getChildren(node: Node) {\r\n  switch (node.type) {\r\n    case \"Assignment\":\r\n      return [toIdentifier(node._symbol), node._expression];\r\n    case \"Derivative\":\r\n      return [toIdentifier(node._symbol), node.args[0]];\r\n    case \"FunctionDefinition\":\r\n      return [\r\n        { type: \"FunctionCall\", _symbol: node._symbol, args: node._argSymbols.map(toIdentifier) } as FunctionCall,\r\n        node._expression,\r\n      ];\r\n    case \"OrderedPairAccess\":\r\n      return [node.args[0], toIdentifier(node.args[1].scalarExprString() === \"1\" ? \"x\" : \"y\")];\r\n    case \"FunctionExponent\":\r\n      return [\r\n        { type: \"FunctionCall\", _symbol: node.args[0]._symbol, args: [node.args[1]] } as FunctionCall,\r\n        node.args[2],\r\n      ];\r\n    case \"FunctionFactorial\":\r\n      return [{ type: \"FunctionCall\", _symbol: node.args[0]._symbol, args: [node.args[1]] } as FunctionCall];\r\n    case \"Regression\":\r\n    case \"Equation\":\r\n      return [node._lhs, node._rhs];\r\n    case \"DoubleInequality\":\r\n      return \"args\" in node ? [node.args[0], node.args[2], node.args[4]] : [];\r\n    case \"Divide\":\r\n      return toFraction(node) ? [] : node.args;\r\n    case \"Negative\":\r\n      return (node.args[0].type === \"Identifier\" && node.args[0]._symbol === \"infty\") ||\r\n        (node.args[0].type === \"Divide\" && toFraction(node.args[0]))\r\n        ? []\r\n        : node.args;\r\n    case \"ListComprehension\":\r\n    case \"SeededFunctionCall\":\r\n      return node.args.slice(1);\r\n    default:\r\n      return \"args\" in node ? (node.args as ChildExprNode[]) : [];\r\n  }\r\n}\r\n\r\nfunction toIdentifier(str: string) {\r\n  return { type: \"Identifier\", _symbol: str } as Identifier;\r\n}\r\n\r\nfunction toFraction(node: Divide) {\r\n  const [nNode, dNode] = node.args;\r\n  if (nNode.type === \"Constant\" && dNode.type === \"Constant\") {\r\n    const n = constantToFraction(nNode);\r\n    const d = constantToFraction(dNode);\r\n    if (\r\n      typeof n === \"string\" &&\r\n      !n.includes(\".\") &&\r\n      !n.includes(\"e\") &&\r\n      typeof d === \"string\" &&\r\n      !d.includes(\".\") &&\r\n      !d.includes(\"e\")\r\n    )\r\n      return { n, d };\r\n  }\r\n}\r\n"],"names":["$9ede406d5d4734e3$export$2e2bcd8739ae039","arr","Array","isArray","$4a70674e361052f0$export$2e2bcd8739ae039","iter","Symbol","iterator","from","$dd0ae20a83d9c48b$export$2e2bcd8739ae039","TypeError","$707285ee35fc6192$export$2e2bcd8739ae039","len","length","i","arr2","$4cbdc253d077b005$export$2e2bcd8739ae039","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","$504867e00cdf72e5$export$2e2bcd8739ae039","$a0e18c8e7b4d3607$var$display","Equation","Assignment","FunctionDefinition","Stats","BoxPlot","DotPlot","Histogram","IndependentTTest","TTest","Regression","Error","Constant","$a0e18c8e7b4d3607$var$constantToFraction","MixedNumber","DotAccess","FunctionCall","$a0e18c8e7b4d3607$var$symbolToElement","FunctionExponent","FunctionFactorial","Identifier","Integral","Derivative","Prime","node","repeat","order","List","Range","ListAccess","BareSeq","ParenSeq","UpdateRule","AssignmentExpression","ListComprehension","OrderedPairAccess","Piecewise","Product","Sum","SeededFunctionCall","Add","Subtract","Multiply","Divide","fraction","$a0e18c8e7b4d3607$var$toFraction","_constantValue","Exponent","Negative","args","type","_symbol","And","Seed","ExtendSeed","DoubleInequality","fragment","document","createDocumentFragment","lhs","createElement","textContent","replace","appendChild","rhs","ref","split","createTextNode","sub","negate","arguments","value","d","sign","includes","diff","v","m","Math","pow","className","numerator","denominator","isNaN","$a0e18c8e7b4d3607$var$parse","Desmos","require","parse","$a0e18c8e7b4d3607$var$calc","GraphingCalculator","getElementById","pasteGraphLink","setExpression","latex","$a0e18c8e7b4d3607$var$count","$a0e18c8e7b4d3607$var$tree","$a0e18c8e7b4d3607$var$onChange","exp","getExpressions","find","$a0e18c8e7b4d3607$var$onError","ul","allowDt","allowIndex","isError","$a0e18c8e7b4d3607$var$recursion","getElementsByTagName","li","div","elementOrFn","element","children","$a0e18c8e7b4d3607$var$toIdentifier","_expression","_argSymbols","map","scalarExprString","_lhs","_rhs","$a0e18c8e7b4d3607$var$getChildren","forEach","child","str","_args","nNode","dNode","observeEvent"],"version":3,"file":"index.b9161ebc.js.map"}