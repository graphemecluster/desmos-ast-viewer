{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import type { desmosRequire } from \"../DesModder/src/globals/window\";\r\nimport type { parseDesmosLatexRaw } from \"../DesModder/src/utils/depUtils\";\r\nimport type Node from \"../DesModder/src/parsing/parsenode\";\r\nimport type { ChildExprNode, Divide, Error, FunctionCall, Identifier } from \"../DesModder/src/parsing/parsenode\";\r\n\r\ndeclare global {\r\n  namespace Desmos {\r\n    const require: typeof desmosRequire;\r\n  }\r\n  interface Window {\r\n    Desmos: typeof Desmos;\r\n  }\r\n}\r\n\r\nconst display: {\r\n  [K in Node[\"type\"]]: string | globalThis.Node | ((node: Node & { type: K }) => string | globalThis.Node);\r\n} = {\r\n  \"Equation\": \"=\",\r\n  \"Assignment\": \"≝\",\r\n  \"FunctionDefinition\": \"ᶠ≝\",\r\n  \"Stats\": \"stats\",\r\n  \"BoxPlot\": \"boxplot\",\r\n  \"DotPlot\": \"dotplot\",\r\n  \"Histogram\": \"histogram\",\r\n  \"IndependentTTest\": \"ittest\",\r\n  \"TTest\": \"ttest\",\r\n  \"Regression\": \"~\",\r\n  \"Error\": \"\",\r\n  \"Constant\": constantToFraction,\r\n  \"MixedNumber\": constantToFraction,\r\n  \"DotAccess\": \".\",\r\n  \"FunctionCall\": symbolToElement,\r\n  \"FunctionExponent\": \"ᶠ^\",\r\n  \"FunctionFactorial\": \"ᶠ!\",\r\n  \"Identifier\": symbolToElement,\r\n  \"Integral\": \"∫\",\r\n  \"Derivative\": \"∂\",\r\n  \"Prime\": node => \"′\".repeat(node.order),\r\n  \"List\": \"[ ]\",\r\n  \"Range\": \"[...]\",\r\n  \"ListAccess\": \"A[n]\",\r\n  \"BareSeq\": \",\",\r\n  \"ParenSeq\": \"( , )\",\r\n  \"UpdateRule\": \"→\",\r\n  \"AssignmentExpression\": \"≔\",\r\n  \"ListComprehension\": \"[ for ]\",\r\n  \"OrderedPairAccess\": \".⁽ ⁾\",\r\n  \"Piecewise\": \"{ }\",\r\n  \"Product\": \"∏\",\r\n  \"Sum\": \"∑\",\r\n  \"SeededFunctionCall\": \"random\",\r\n  \"Add\": \"+\",\r\n  \"Subtract\": \"−\",\r\n  \"Multiply\": \"×\",\r\n  \"Divide\": node => {\r\n    const fraction = toFraction(node);\r\n    return fraction ? constantToFraction({ _constantValue: fraction }) : \"÷\";\r\n  },\r\n  \"Exponent\": \"^\",\r\n  \"Negative\": node => {\r\n    if (node.args[0].type === \"Identifier\" && node.args[0]._symbol === \"infty\") return \"-infty\";\r\n    if (node.args[0].type !== \"Divide\") return \"-\";\r\n    const fraction = toFraction(node.args[0]);\r\n    return fraction ? constantToFraction({ _constantValue: fraction }, true) : \"-\";\r\n  },\r\n  \"And\": \"⋂\",\r\n  \"Comparator['<']\": \"<\",\r\n  \"Comparator['>']\": \">\",\r\n  \"Comparator['<=']\": \"≤\",\r\n  \"Comparator['>=']\": \"≥\",\r\n  \"Comparator['=']\": \"=\",\r\n  \"Seed\": \"\",\r\n  \"ExtendSeed\": \"\",\r\n  \"DoubleInequality\": node => {\r\n    const fragment = document.createDocumentFragment();\r\n    const lhs = document.createElement(\"div\");\r\n    lhs.textContent = node.args[1].replace(\"<=\", \"≤\").replace(\">=\", \"≥\");\r\n    fragment.appendChild(lhs);\r\n    const rhs = document.createElement(\"div\");\r\n    rhs.textContent = node.args[3].replace(\"<=\", \"≤\").replace(\">=\", \"≥\");\r\n    fragment.appendChild(rhs);\r\n    return fragment;\r\n  },\r\n};\r\n\r\nfunction symbolToElement(node: Node & { _symbol: string }) {\r\n  if (node._symbol === \"factorial\") return \"!\";\r\n  const [lhs, rhs] = node._symbol.split(\"_\");\r\n  if (rhs) {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.appendChild(document.createTextNode(lhs!));\r\n    const sub = document.createElement(\"sub\");\r\n    sub.textContent = rhs;\r\n    fragment.appendChild(sub);\r\n    return fragment;\r\n  }\r\n  return lhs!;\r\n}\r\n\r\nfunction constantToFraction(\r\n  node: { _constantValue: boolean | number | { n: string | number; d: string | number } },\r\n  negate = false\r\n) {\r\n  const value = node._constantValue;\r\n  if (typeof value === \"object\") {\r\n    let n = value.n + \"\";\r\n    let d = value.d + \"\";\r\n    const sign = ((n[0] === \"-\") === (d[0] === \"-\")) !== negate;\r\n    n = n.replace(/^-/, \"\");\r\n    d = d.replace(/^-/, \"\");\r\n    if (d === \"1\") return (sign ? \"\" : \"-\") + n;\r\n    if (d === \"0\") return n === \"0\" ? \"undefined\" : (sign ? \"\" : \"-\") + \"infty\";\r\n    if (!n.includes(\"e\") && !d.includes(\"e\")) {\r\n      let diff = 0;\r\n      let v = +d;\r\n      while (v !== 1 && !(v % 5)) {\r\n        v /= 5;\r\n        diff++;\r\n      }\r\n      while (v !== 1 && !(v % 2)) {\r\n        v /= 2;\r\n        diff--;\r\n      }\r\n      if (v === 1) {\r\n        const m = diff < 0 ? 5 ** -diff : 2 ** diff;\r\n        n = +n * m + \"\";\r\n        d = +d * m + \"\";\r\n        return (\r\n          (sign ? \"\" : \"-\") +\r\n          (n.length < d.length\r\n            ? \"0.\" + \"0\".repeat(d.length - n.length - 1) + n\r\n            : n.slice(0, 1 - d.length) + \".\" + n.slice(1 - d.length)\r\n          ).replace(/\\.?0+$/, \"\")\r\n        );\r\n      }\r\n    }\r\n    const fraction = document.createElement(\"span\");\r\n    fraction.className = \"fraction\";\r\n    const numerator = document.createElement(\"span\");\r\n    numerator.textContent = n;\r\n    fraction.appendChild(numerator);\r\n    const denominator = document.createElement(\"span\");\r\n    denominator.textContent = d;\r\n    fraction.appendChild(denominator);\r\n    if (!sign) {\r\n      const fragment = document.createDocumentFragment();\r\n      fragment.appendChild(document.createTextNode(\"- \"));\r\n      fragment.appendChild(fraction);\r\n      return fragment;\r\n    }\r\n    return fraction;\r\n  }\r\n  return isNaN(value as number) ? \"undefined\" : value + \"\";\r\n}\r\n\r\nconst parse = Desmos.require(\"parser\").parse as typeof parseDesmosLatexRaw;\r\nconst calc = Desmos.GraphingCalculator(document.getElementById(\"calculator\")!, { pasteGraphLink: true });\r\ncalc.setExpression({ latex: \"x^{2}+y^{2}=10\" });\r\n\r\nconst count = document.getElementById(\"count\")!;\r\nconst tree = document.getElementById(\"tree\")!;\r\ncalc.observeEvent(\"change\", onChange);\r\nonChange();\r\n\r\nfunction onChange() {\r\n  const exp = calc\r\n    .getExpressions()\r\n    .find((exp): exp is Exclude<Desmos.ExpressionState, { type: \"table\" }> & { latex: string } => (exp as any).latex);\r\n  if (!exp) return onError();\r\n  tree.textContent = \"\";\r\n  const ul = document.createElement(\"ul\");\r\n  const node = parse(exp.latex, { allowDt: true, allowIndex: true });\r\n  if ((node as Error).isError) return onError();\r\n  ul.appendChild(recursion(node));\r\n  tree.appendChild(ul);\r\n  count.textContent = tree.getElementsByTagName(\"div\").length + \"\";\r\n}\r\n\r\nfunction onError() {\r\n  tree.textContent = \"\";\r\n  count.textContent = \"?\";\r\n}\r\n\r\nfunction recursion(node: Node): HTMLLIElement {\r\n  const li = document.createElement(\"li\");\r\n  const div = document.createElement(node.type === \"DoubleInequality\" ? \"span\" : \"div\");\r\n  const elementOrFn = display[node.type] as string | globalThis.Node | ((node: Node) => string | globalThis.Node);\r\n  const element = typeof elementOrFn === \"function\" ? elementOrFn(node) : elementOrFn;\r\n  div.textContent = \"\";\r\n  div.appendChild(typeof element === \"string\" ? document.createTextNode(element) : element);\r\n  li.appendChild(div);\r\n  const children = getChildren(node);\r\n  if (children.length) {\r\n    const ul = document.createElement(\"ul\");\r\n    children.forEach(child => ul.appendChild(recursion(child)));\r\n    li.appendChild(ul);\r\n  }\r\n  return li;\r\n}\r\n\r\nfunction getChildren(node: Node) {\r\n  switch (node.type) {\r\n    case \"Assignment\":\r\n      return [toIdentifier(node._symbol), node._expression];\r\n    case \"Derivative\":\r\n      return [toIdentifier(node._symbol), node.args[0]];\r\n    case \"FunctionDefinition\":\r\n      return [\r\n        { type: \"FunctionCall\", _symbol: node._symbol, args: node._argSymbols.map(toIdentifier) } as FunctionCall,\r\n        node._expression,\r\n      ];\r\n    case \"OrderedPairAccess\":\r\n      return [node.args[0], toIdentifier(node.args[1].scalarExprString() === \"1\" ? \"x\" : \"y\")];\r\n    case \"FunctionExponent\":\r\n      return [\r\n        { type: \"FunctionCall\", _symbol: node.args[0]._symbol, args: [node.args[1]] } as FunctionCall,\r\n        node.args[2],\r\n      ];\r\n    case \"FunctionFactorial\":\r\n      return [{ type: \"FunctionCall\", _symbol: node.args[0]._symbol, args: [node.args[1]] } as FunctionCall];\r\n    case \"Regression\":\r\n    case \"Equation\":\r\n      return [node._lhs, node._rhs];\r\n    case \"DoubleInequality\":\r\n      return \"args\" in node ? [node.args[0], node.args[2], node.args[4]] : [];\r\n    case \"Divide\":\r\n      return toFraction(node) ? [] : node.args;\r\n    case \"Negative\":\r\n      return (node.args[0].type === \"Identifier\" && node.args[0]._symbol === \"infty\") ||\r\n        (node.args[0].type === \"Divide\" && toFraction(node.args[0]))\r\n        ? []\r\n        : node.args;\r\n    case \"ListComprehension\":\r\n    case \"SeededFunctionCall\":\r\n      return node.args.slice(1);\r\n    default:\r\n      return \"args\" in node ? (node.args as ChildExprNode[]) : [];\r\n  }\r\n}\r\n\r\nfunction toIdentifier(str: string) {\r\n  return { type: \"Identifier\", _symbol: str } as Identifier;\r\n}\r\n\r\nfunction toFraction(node: Divide) {\r\n  const [nNode, dNode] = node.args;\r\n  if (nNode.type === \"Constant\" && dNode.type === \"Constant\") {\r\n    const n = constantToFraction(nNode);\r\n    const d = constantToFraction(dNode);\r\n    if (\r\n      typeof n === \"string\" &&\r\n      !n.includes(\".\") &&\r\n      !n.includes(\"e\") &&\r\n      typeof d === \"string\" &&\r\n      !d.includes(\".\") &&\r\n      !d.includes(\"e\")\r\n    )\r\n      return { n, d };\r\n  }\r\n}\r\n"],"names":["$cf396bce439ccd60$var$display","Equation","Assignment","FunctionDefinition","Stats","BoxPlot","DotPlot","Histogram","IndependentTTest","TTest","Regression","Error","Constant","$cf396bce439ccd60$var$constantToFraction","MixedNumber","DotAccess","FunctionCall","$cf396bce439ccd60$var$symbolToElement","FunctionExponent","FunctionFactorial","Identifier","Integral","Derivative","Prime","node","repeat","order","List","Range","ListAccess","BareSeq","ParenSeq","UpdateRule","AssignmentExpression","ListComprehension","OrderedPairAccess","Piecewise","Product","Sum","SeededFunctionCall","Add","Subtract","Multiply","Divide","fraction","$cf396bce439ccd60$var$toFraction","_constantValue","Exponent","Negative","args","type","_symbol","And","Seed","ExtendSeed","DoubleInequality","fragment","document","createDocumentFragment","lhs","createElement","textContent","replace","appendChild","rhs","split","createTextNode","sub","negate","value","n","d","sign","includes","diff","v","m","length","slice","className","numerator","denominator","isNaN","$cf396bce439ccd60$var$parse","Desmos","require","parse","$cf396bce439ccd60$var$calc","GraphingCalculator","getElementById","pasteGraphLink","setExpression","latex","$cf396bce439ccd60$var$count","$cf396bce439ccd60$var$tree","$cf396bce439ccd60$var$onChange","exp","getExpressions","find","$cf396bce439ccd60$var$onError","ul","allowDt","allowIndex","isError","$cf396bce439ccd60$var$recursion","getElementsByTagName","li","div","elementOrFn","element","children","$cf396bce439ccd60$var$toIdentifier","_expression","_argSymbols","map","scalarExprString","_lhs","_rhs","$cf396bce439ccd60$var$getChildren","forEach","child","str","nNode","dNode","observeEvent"],"version":3,"file":"index.0820a5bd.js.map"}