{"mappings":"AAEA,IAgBkCA,EAAOC,EAhBlC,SAASC,EAAQC,EAA6BC,IACnD,SAASC,EAAUF,EAAaG,GAC9B,IAAK,MAAMC,KAAOJ,EACXK,OAAOC,UAAUC,eAAeC,KAAKR,EAAQI,KACvB,iBAAhBJ,EAAOI,IAAqC,OAAhBJ,EAAOI,GAAeF,EAAUF,EAAOI,GAAMD,EAASC,EAAM,KAC9FH,EAASE,EAASC,EAAKJ,EAAOI,I,CAGvCF,CAAUF,EAAQ,G,CAGb,SAASS,EAAUC,EAA2CC,GACnE,MAAMC,EAA8B,GACpC,IAAK,MAAOR,EAAKS,KAAUH,EAAU,CACnC,MAAMI,EAAOV,EAAIW,MAAM,KACjBC,EAAOF,EAAKG,MAClBH,EAAKI,QAAO,CAAClB,EAAQI,KAASP,EAAAG,GAAOF,EAAAM,KAAPP,EAAOC,GAAS,KAAKc,GAAQI,GAAQL,EAAOE,E,CAE5E,OAAOD,C,CAGF,SAASO,EAAUC,GACxB,IACE,OAAOC,mBAAmBD,EAAIE,QAAO,oBAAsB,O,CAC3D,MACA,OAAOF,C,ECXX,MAAMG,EAEF,CACFC,SAAY,IACZC,WAAc,IACdC,mBAAsB,KACtBC,MAAS,QACTC,QAAW,UACXC,QAAW,UACXC,UAAa,YACbC,iBAAoB,SACpBC,MAAS,QACTC,WAAc,IACdC,MAAS,GACTC,SAAYC,EACZC,YAAeD,EACfE,UAAa,IACbC,aAAgBC,EAChBC,iBAAoB,KACpBC,kBAAqB,KACrBC,WAAcH,EACdI,SAAY,IACZC,WAAc,IACdC,MAASC,GAAQ,IAAIC,OAAOD,EAAKE,OACjCC,KAAQ,MACRC,MAAS,QACTC,WAAc,OACdC,QAAW,IACXC,SAAY,QACZC,WAAc,IACdC,qBAAwB,IACxBC,kBAAqB,UACrBC,kBAAqB,OACrBC,UAAa,MACbC,QAAW,IACXC,IAAO,IACPC,mBAAsB,SACtBC,IAAO,IACPC,SAAY,IACZC,SAAY,IACZC,OAAUnB,IACR,MAAMoB,EAAWC,EAAWrB,GAC5B,OAAOoB,EAAW/B,EAAmB,CAAEiC,eAAgBF,IAAc,GAAG,EAE1EG,SAAY,IACZC,SAAYxB,IACV,GAA0B,eAAtBA,EAAKyB,KAAK,GAAGC,MAAkD,UAAzB1B,EAAKyB,KAAK,GAAGE,QAAqB,MAAO,SACnF,GAA0B,WAAtB3B,EAAKyB,KAAK,GAAGC,KAAmB,MAAO,IAC3C,MAAMN,EAAWC,EAAWrB,EAAKyB,KAAK,IACtC,OAAOL,EAAW/B,EAAmB,CAAEiC,eAAgBF,IAAY,GAAQ,GAAG,EAEhFQ,IAAO,IACP,kBAAmB,IACnB,kBAAmB,IACnB,mBAAoB,IACpB,mBAAoB,IACpB,kBAAmB,IACnBC,KAAQ,GACRC,WAAc,GACdC,iBAAoB/B,IAClB,MAAMgC,EAAWC,SAASC,yBACpBC,EAAMF,SAASG,cAAc,OACnCD,EAAIE,YAAcrC,EAAKyB,KAAK,GAAGlD,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAChEyD,EAASM,YAAYH,GACrB,MAAMI,EAAMN,SAASG,cAAc,OAGnC,OAFAG,EAAIF,YAAcrC,EAAKyB,KAAK,GAAGlD,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAChEyD,EAASM,YAAYC,GACdP,CAAQ,GAInB,SAASvC,EAAgBO,GACvB,GAAqB,cAAjBA,EAAK2B,QAAyB,MAAO,IACzC,MAAOQ,EAAKI,GAAOvC,EAAK2B,QAAQ3D,MAAM,KACtC,GAAIuE,EAAK,CACP,MAAMP,EAAWC,SAASC,yBAC1BF,EAASM,YAAYL,SAASO,eAAeL,IAC7C,MAAMM,EAAMR,SAASG,cAAc,OAGnC,OAFAK,EAAIJ,YAAcE,EAClBP,EAASM,YAAYG,GACdT,C,CAET,OAAOG,C,CAGT,SAAS9C,EACPW,EACA0C,GAAS,GAET,MAAM5E,EAAQkC,EAAKsB,eACnB,GAAqB,iBAAVxD,EAAoB,CAC7B,IAAI6E,EAAI7E,EAAM6E,EAAI,GACdC,EAAI9E,EAAM8E,EAAI,GAClB,MAAMC,EAAkB,MAAXF,EAAI,KAA0B,MAATC,EAAE,MAAiBF,EAGrD,GAFAC,EAAIA,EAAEpE,QAAO,KAAO,IACpBqE,EAAIA,EAAErE,QAAO,KAAO,IACV,MAANqE,EAAW,OAAQC,EAAO,GAAK,KAAOF,EAC1C,GAAU,MAANC,EAAW,MAAa,MAAND,EAAY,aAAeE,EAAO,GAAK,KAAO,QACpE,IAAKF,EAAEG,SAAS,OAASF,EAAEE,SAAS,KAAM,CACxC,IAAIC,EAAO,EACPC,GAAKJ,EACT,KAAa,IAANI,KAAaA,EAAI,IACtBA,GAAK,EACLD,IAEF,KAAa,IAANC,KAAaA,EAAI,IACtBA,GAAK,EACLD,IAEF,GAAU,IAANC,EAAS,CACX,MAAMC,EAAIF,EAAO,EAAI,IAAMA,EAAO,GAAKA,EAGvC,OAFAJ,GAAKA,EAAIM,EAAI,GACbL,GAAKA,EAAIK,EAAI,IAEVJ,EAAO,GAAK,MACZF,EAAEO,OAASN,EAAEM,OACV,KAAO,IAAIjD,OAAO2C,EAAEM,OAASP,EAAEO,OAAS,GAAKP,EAC7CA,EAAEQ,MAAM,EAAG,EAAIP,EAAEM,QAAU,IAAMP,EAAEQ,MAAM,EAAIP,EAAEM,SACjD3E,QAAO,SAAW,G,EAI1B,MAAM6C,EAAWa,SAASG,cAAc,QACxChB,EAASgC,UAAY,WACrB,MAAMC,EAAYpB,SAASG,cAAc,QACzCiB,EAAUhB,YAAcM,EACxBvB,EAASkB,YAAYe,GACrB,MAAMC,EAAcrB,SAASG,cAAc,QAG3C,GAFAkB,EAAYjB,YAAcO,EAC1BxB,EAASkB,YAAYgB,IAChBT,EAAM,CACT,MAAMb,EAAWC,SAASC,yBAG1B,OAFAF,EAASM,YAAYL,SAASO,eAAe,OAC7CR,EAASM,YAAYlB,GACdY,C,CAET,OAAOZ,C,CAET,OAAOmC,MAAMzF,GAAmB,YAAcA,EAAQ,E,CAGxD,MAAM0F,EAAoBC,OAAOC,QAAQ,yBAAyBC,QAAQpG,UACpEqG,EAAmBH,OAAOC,QAAQ,0BAA0BC,QAElE,IAAIE,EACJ,MAAMC,EAAaN,EAAkBO,QACrCP,EAAkBO,QAAU,SAAUC,GACpCH,EAAeD,EAAiBI,GAChCF,EAAWrG,KAAKwG,KAAMD,E,EAGxB,MAAME,EAAQT,OAAOC,QAAQ,UAAUS,MACjCC,EAAOX,OAAOY,mBAAmBpC,SAASqC,eAAe,cAAgB,CAC7EC,gBAAgB,EAChBC,uBAAuBC,EAAYC,GACjCA,EAAE,KAAMD,GACR,MAAME,EAAQ,mFAAmFC,KAAKf,GAClGc,GAAOE,QAAQC,aAAaL,EAAGxC,SAAS8C,MAAO,sBAAwBJ,EAAM,G,IAGrFK,KAAKC,KAAOb,EAEZA,EAAKc,uBACL,MAAMC,EAAyB,IAAIC,IAsCnC,SAASC,EACPC,GAEA,OAAOA,EAAaC,K,CAxCtBvI,EAAQoH,EAAKoB,iBAAiB,IAAK,CAACnI,EAAKS,IAAUqH,EAAuBM,IAAIpI,EAAKS,KACnFqH,EAAuBO,OAAO,SAG3B,MACC,MAAMC,EAAWC,SAASD,SAASpH,QAAO,0BAA4B,IACtE,GAAIoH,EASF,OARAlC,OAAOC,QAAQ,6BAA6BC,QAC1CS,EAAcyB,WACd,qCAAuCF,GACvC,CAAClB,EAAYC,KACXA,EAAE,KAAMD,GACRI,QAAQC,aAAaL,EAAGxC,SAAS8C,MAAO,sBAAwBY,EAAS,KAGtE,EAET,MAAMG,EAAS,IAAIC,gBAAgBH,SAASI,QACtCC,EAAQH,EAAOI,IAAI,SACzB,GAAID,EACF,IAEE,OADA7B,EAAK+B,SAAS/H,EAAU6H,KACjB,C,CACP,MACA,OAAO,C,CAEX,GAAIH,EAAOM,IAAI,SACb,IAEE,OADAhC,EAAKiC,cAAc3I,EAAUoI,EAAOQ,WAAWC,IAAK,MDhL3C,UADWlI,ECiL4CD,EAAUmI,KDhLzC,UAARlI,KAA2BA,IAASA,GAAOA,EAAMA,GAD3E,IAAqBA,CCiLyD,MACtE,C,CACP,MACA,OAAO,C,CAEZ,EA7BA,IA+BD+F,EAAKiC,cAAc,CAAEd,MAAO,mBAoB9BnB,EAAKoC,aAAa,UAAU,KAC1B,MAAMP,EAAQ7B,EAAKqC,WACbC,EAActC,EAAKoB,iBAAiBmB,OAAOtB,GACjDR,QAAQC,aACNmB,EACAhE,SAAS8C,MACR2B,EAAYxD,OAEc,IAAvBwD,EAAYxD,OACZ,uBArBR,SAAoBoC,GAClB,MAAMQ,EAAS,IAAIC,gBAQnB,OAPA/I,EAAQsI,GAAK,CAACjI,EAAKS,KACbqH,EAAuBe,IAAI7I,KAASS,GAAOgI,EAAOL,IAAIpI,EAAKS,EAAM,IAEvEgI,EAAOJ,OAAO,QACdI,EAAOJ,OAAO,MACdI,EAAOJ,OAAO,UACdI,EAAOJ,OAAO,UACPI,C,CAYwBc,CAAWF,EAAY,IAChD,6BAA+BG,mBAAmBC,KAAKC,UAAUd,IAHjE,sBAIL,IAGH,MAAMe,EAAQ/E,SAASqC,eAAe,SAChC2C,EAAOhF,SAASqC,eAAe,QAIrC,SAAS4C,IACP,MAAM5B,EAAMlB,EAAKoB,iBAAiB2B,KAAK9B,GACvC,IAAKC,EAAK,OAAO8B,IACjBH,EAAK5E,YAAc,GACnB,MAAMgF,EAAKpF,SAASG,cAAc,MAC5BpC,EAAOkE,EAAMoB,EAAIC,MAAO,CAAE+B,SAAS,EAAMC,YAAY,IAC3D,GAAIvH,EAAgBwH,QAAS,OAAOJ,IACpCC,EAAG/E,YAAYmF,EAAUzH,IACzBiH,EAAK3E,YAAY+E,GACjBL,EAAM3E,YAAc4E,EAAKS,qBAAqB,OAAOxE,OAAS,E,CAGhE,SAASkE,IACPH,EAAK5E,YAAc,GACnB2E,EAAM3E,YAAc,G,CAGtB,SAASoF,EAAUzH,GACjB,MAAM2H,EAAK1F,SAASG,cAAc,MAC5BwF,EAAM3F,SAASG,cAA4B,qBAAdpC,EAAK0B,KAA8B,OAAS,OACzEmG,EAAcrJ,EAAQwB,EAAK0B,MAC3BoG,EAAiC,mBAAhBD,EAA6BA,EAAY7H,GAAQ6H,EACxED,EAAIvF,YAAc,GAClBuF,EAAItF,YAA+B,iBAAZwF,EAAuB7F,SAASO,eAAesF,GAAWA,GACjFH,EAAGrF,YAAYsF,GACf,MAAMG,EASR,SAAqB/H,GACnB,OAAQA,EAAK0B,MACX,IAAK,aACH,MAAO,CAACsG,EAAahI,EAAK2B,SAAU3B,EAAKiI,aAC3C,IAAK,aACH,MAAO,CAACD,EAAahI,EAAK2B,SAAU3B,EAAKyB,KAAK,IAChD,IAAK,qBACH,MAAO,CACL,CAAEC,KAAM,eAAgBC,QAAS3B,EAAK2B,QAASF,KAAMzB,EAAKkI,YAAYC,IAAIH,IAC1EhI,EAAKiI,aAET,IAAK,oBACH,MAAO,CAACjI,EAAKyB,KAAK,GAAIuG,EAAiD,MAApChI,EAAKyB,KAAK,GAAG2G,mBAA6B,IAAM,MACrF,IAAK,mBACH,MAAO,CACL,CAAE1G,KAAM,eAAgBC,QAAS3B,EAAKyB,KAAK,GAAGE,QAASF,KAAM,CAACzB,EAAKyB,KAAK,KACxEzB,EAAKyB,KAAK,IAEd,IAAK,oBACH,MAAO,CAAC,CAAEC,KAAM,eAAgBC,QAAS3B,EAAKyB,KAAK,GAAGE,QAASF,KAAM,CAACzB,EAAKyB,KAAK,MAClF,IAAK,aACL,IAAK,WACH,MAAO,CAACzB,EAAKqI,KAAMrI,EAAKsI,MAC1B,IAAK,mBACH,MAAO,SAAUtI,EAAO,CAACA,EAAKyB,KAAK,GAAIzB,EAAKyB,KAAK,GAAIzB,EAAKyB,KAAK,IAAM,GACvE,IAAK,SACH,OAAOJ,EAAWrB,GAAQ,GAAKA,EAAKyB,KACtC,IAAK,WACH,MAA8B,eAAvBzB,EAAMyB,KAAK,GAAGC,MAAkD,UAAzB1B,EAAKyB,KAAK,GAAGE,SAClC,WAAtB3B,EAAKyB,KAAK,GAAGC,MAAqBL,EAAWrB,EAAKyB,KAAK,IACtD,GACAzB,EAAKyB,KACX,IAAK,oBACL,IAAK,qBACH,OAAOzB,EAAKyB,KAAK0B,MAAM,GACzB,QACE,MAAO,SAAUnD,EAAQA,EAAKyB,KAA2B,G,CA7C5C8G,CAAYvI,GAC7B,GAAI+H,EAAS7E,OAAQ,CACnB,MAAMmE,EAAKpF,SAASG,cAAc,MAClC2F,EAASS,SAAQC,GAASpB,EAAG/E,YAAYmF,EAAUgB,MACnDd,EAAGrF,YAAY+E,E,CAEjB,OAAOM,C,CA2CT,SAASK,EAAa3J,GACpB,MAAO,CAAEqD,KAAM,aAAcC,QAAStD,E,CAGxC,SAASgD,EAAWrB,GAClB,MAAO0I,EAAOC,GAAS3I,EAAKyB,KAC5B,GAAmB,aAAfiH,EAAMhH,MAAsC,aAAfiH,EAAMjH,KAAqB,CAC1D,MAAMiB,EAAItD,EAAmBqJ,GACvB9F,EAAIvD,EAAmBsJ,GAC7B,KACe,iBAANhG,GACNA,EAAEG,SAAS,MACXH,EAAEG,SAAS,MACC,iBAANF,GACNA,EAAEE,SAAS,MACXF,EAAEE,SAAS,MAEZ,MAAO,C,EAAEH,E,EAAGC,E,EA9FlBwB,EAAKoC,aAAa,SAAUU,GAC5BA","sources":["src/utils.ts","src/index.ts"],"sourcesContent":["// https://stackoverflow.com/a/59787588\r\n\r\nexport function flatten(object: Record<string, any>, callback: (key: string, value: any) => void) {\r\n  function recursion(object: any, prefix: string) {\r\n    for (const key in object) {\r\n      if (!Object.prototype.hasOwnProperty.call(object, key)) continue;\r\n      if (typeof object[key] === \"object\" && object[key] !== null) recursion(object[key], prefix + key + \".\");\r\n      else callback(prefix + key, object[key]);\r\n    }\r\n  }\r\n  recursion(object, \"\");\r\n}\r\n\r\nexport function unflatten(iterator: IterableIterator<[string, any]>, mapper: (x: any) => any) {\r\n  const result: Record<string, any> = {};\r\n  for (const [key, value] of iterator) {\r\n    const keys = key.split(\".\");\r\n    const last = keys.pop()!;\r\n    keys.reduce((object, key) => (object[key] ||= {}), result)[last] = mapper(value);\r\n  }\r\n  return result;\r\n}\r\n\r\nexport function tryDecode(str: string) {\r\n  try {\r\n    return decodeURIComponent(str.replace(/%(?![\\da-f]{2})/gi, \"%25\"));\r\n  } catch {\r\n    return str;\r\n  }\r\n}\r\n\r\nexport function fromDecoded(str: string) {\r\n  return str === \"true\" ? true : str === \"false\" ? false : +str === +str ? +str : str;\r\n}\r\n","import type { desmosRequire } from \"../DesModder/src/globals/window\";\r\nimport type { parseDesmosLatexRaw } from \"../DesModder/src/utils/depUtils\";\r\nimport type Node from \"../DesModder/src/parsing/parsenode\";\r\nimport type { ChildExprNode, Divide, Error, FunctionCall, Identifier } from \"../DesModder/src/parsing/parsenode\";\r\nimport { flatten, fromDecoded, tryDecode, unflatten } from \"./utils\";\r\n\r\ndeclare global {\r\n  namespace Desmos {\r\n    const require: typeof desmosRequire;\r\n  }\r\n  interface Window {\r\n    Desmos: typeof Desmos;\r\n    Calc: Desmos.Calculator;\r\n  }\r\n}\r\n\r\nconst display: {\r\n  [K in Node[\"type\"]]: string | globalThis.Node | ((node: Node & { type: K }) => string | globalThis.Node);\r\n} = {\r\n  \"Equation\": \"=\",\r\n  \"Assignment\": \"≝\",\r\n  \"FunctionDefinition\": \"ᶠ≝\",\r\n  \"Stats\": \"stats\",\r\n  \"BoxPlot\": \"boxplot\",\r\n  \"DotPlot\": \"dotplot\",\r\n  \"Histogram\": \"histogram\",\r\n  \"IndependentTTest\": \"ittest\",\r\n  \"TTest\": \"ttest\",\r\n  \"Regression\": \"~\",\r\n  \"Error\": \"\",\r\n  \"Constant\": constantToFraction,\r\n  \"MixedNumber\": constantToFraction,\r\n  \"DotAccess\": \".\",\r\n  \"FunctionCall\": symbolToElement,\r\n  \"FunctionExponent\": \"ᶠ^\",\r\n  \"FunctionFactorial\": \"ᶠ!\",\r\n  \"Identifier\": symbolToElement,\r\n  \"Integral\": \"∫\",\r\n  \"Derivative\": \"∂\",\r\n  \"Prime\": node => \"′\".repeat(node.order),\r\n  \"List\": \"[ ]\",\r\n  \"Range\": \"[...]\",\r\n  \"ListAccess\": \"A[n]\",\r\n  \"BareSeq\": \",\",\r\n  \"ParenSeq\": \"( , )\",\r\n  \"UpdateRule\": \"→\",\r\n  \"AssignmentExpression\": \"≔\",\r\n  \"ListComprehension\": \"[ for ]\",\r\n  \"OrderedPairAccess\": \".⁽ ⁾\",\r\n  \"Piecewise\": \"{ }\",\r\n  \"Product\": \"∏\",\r\n  \"Sum\": \"∑\",\r\n  \"SeededFunctionCall\": \"random\",\r\n  \"Add\": \"+\",\r\n  \"Subtract\": \"−\",\r\n  \"Multiply\": \"×\",\r\n  \"Divide\": node => {\r\n    const fraction = toFraction(node);\r\n    return fraction ? constantToFraction({ _constantValue: fraction }) : \"÷\";\r\n  },\r\n  \"Exponent\": \"^\",\r\n  \"Negative\": node => {\r\n    if (node.args[0].type === \"Identifier\" && node.args[0]._symbol === \"infty\") return \"-infty\";\r\n    if (node.args[0].type !== \"Divide\") return \"-\";\r\n    const fraction = toFraction(node.args[0]);\r\n    return fraction ? constantToFraction({ _constantValue: fraction }, true) : \"-\";\r\n  },\r\n  \"And\": \"⋂\",\r\n  \"Comparator['<']\": \"<\",\r\n  \"Comparator['>']\": \">\",\r\n  \"Comparator['<=']\": \"≤\",\r\n  \"Comparator['>=']\": \"≥\",\r\n  \"Comparator['=']\": \"=\",\r\n  \"Seed\": \"\",\r\n  \"ExtendSeed\": \"\",\r\n  \"DoubleInequality\": node => {\r\n    const fragment = document.createDocumentFragment();\r\n    const lhs = document.createElement(\"div\");\r\n    lhs.textContent = node.args[1].replace(\"<=\", \"≤\").replace(\">=\", \"≥\");\r\n    fragment.appendChild(lhs);\r\n    const rhs = document.createElement(\"div\");\r\n    rhs.textContent = node.args[3].replace(\"<=\", \"≤\").replace(\">=\", \"≥\");\r\n    fragment.appendChild(rhs);\r\n    return fragment;\r\n  },\r\n};\r\n\r\nfunction symbolToElement(node: Node & { _symbol: string }) {\r\n  if (node._symbol === \"factorial\") return \"!\";\r\n  const [lhs, rhs] = node._symbol.split(\"_\");\r\n  if (rhs) {\r\n    const fragment = document.createDocumentFragment();\r\n    fragment.appendChild(document.createTextNode(lhs!));\r\n    const sub = document.createElement(\"sub\");\r\n    sub.textContent = rhs;\r\n    fragment.appendChild(sub);\r\n    return fragment;\r\n  }\r\n  return lhs!;\r\n}\r\n\r\nfunction constantToFraction(\r\n  node: { _constantValue: boolean | number | { n: string | number; d: string | number } },\r\n  negate = false\r\n) {\r\n  const value = node._constantValue;\r\n  if (typeof value === \"object\") {\r\n    let n = value.n + \"\";\r\n    let d = value.d + \"\";\r\n    const sign = ((n[0] === \"-\") === (d[0] === \"-\")) !== negate;\r\n    n = n.replace(/^-/, \"\");\r\n    d = d.replace(/^-/, \"\");\r\n    if (d === \"1\") return (sign ? \"\" : \"-\") + n;\r\n    if (d === \"0\") return n === \"0\" ? \"undefined\" : (sign ? \"\" : \"-\") + \"infty\";\r\n    if (!n.includes(\"e\") && !d.includes(\"e\")) {\r\n      let diff = 0;\r\n      let v = +d;\r\n      while (v !== 1 && !(v % 5)) {\r\n        v /= 5;\r\n        diff++;\r\n      }\r\n      while (v !== 1 && !(v % 2)) {\r\n        v /= 2;\r\n        diff--;\r\n      }\r\n      if (v === 1) {\r\n        const m = diff < 0 ? 5 ** -diff : 2 ** diff;\r\n        n = +n * m + \"\";\r\n        d = +d * m + \"\";\r\n        return (\r\n          (sign ? \"\" : \"-\") +\r\n          (n.length < d.length\r\n            ? \"0.\" + \"0\".repeat(d.length - n.length - 1) + n\r\n            : n.slice(0, 1 - d.length) + \".\" + n.slice(1 - d.length)\r\n          ).replace(/\\.?0+$/, \"\")\r\n        );\r\n      }\r\n    }\r\n    const fraction = document.createElement(\"span\");\r\n    fraction.className = \"fraction\";\r\n    const numerator = document.createElement(\"span\");\r\n    numerator.textContent = n;\r\n    fraction.appendChild(numerator);\r\n    const denominator = document.createElement(\"span\");\r\n    denominator.textContent = d;\r\n    fraction.appendChild(denominator);\r\n    if (!sign) {\r\n      const fragment = document.createDocumentFragment();\r\n      fragment.appendChild(document.createTextNode(\"- \"));\r\n      fragment.appendChild(fraction);\r\n      return fragment;\r\n    }\r\n    return fraction;\r\n  }\r\n  return isNaN(value as number) ? \"undefined\" : value + \"\";\r\n}\r\n\r\nconst ListViewPrototype = Desmos.require(\"expressions/list-view\").default.prototype;\r\nconst getClipboardData = Desmos.require(\"lib/get-clipboard-data\").default;\r\n\r\nlet prevPathname: string;\r\nconst oldOnPaste = ListViewPrototype.onPaste;\r\nListViewPrototype.onPaste = function (e: ClipboardEvent) {\r\n  prevPathname = getClipboardData(e);\r\n  oldOnPaste.call(this, e);\r\n};\r\n\r\nconst parse = Desmos.require(\"parser\").parse as typeof parseDesmosLatexRaw;\r\nconst calc = Desmos.GraphingCalculator(document.getElementById(\"calculator\")!, {\r\n  pasteGraphLink: true,\r\n  pasteGraphLinkCallback(s: unknown, t: Function) {\r\n    t(null, s);\r\n    const match = /^\\s*https?:\\/\\/(?:[a-zA-Z0-9]*\\.)?desmos\\.com(?::[0-9]+)?\\/calculator\\/(.+?)\\s*$/.exec(prevPathname);\r\n    if (match) history.replaceState(s, document.title, \"/desmos-ast-viewer/\" + match[1]);\r\n  },\r\n} as any);\r\nself.Calc = calc;\r\n\r\ncalc.focusFirstExpression();\r\nconst defaultExpressionState = new Map();\r\nflatten(calc.getExpressions()[0]!, (key, value) => defaultExpressionState.set(key, value));\r\ndefaultExpressionState.delete(\"color\");\r\n\r\nif (\r\n  !(() => {\r\n    const pathname = location.pathname.replace(/^\\/desmos-ast-viewer\\/?/, \"\");\r\n    if (pathname) {\r\n      Desmos.require(\"main/load-graph-from-link\").default(\r\n        (calc as any).controller,\r\n        \"https://www.desmos.com/calculator/\" + pathname,\r\n        (s: unknown, t: Function) => {\r\n          t(null, s);\r\n          history.replaceState(s, document.title, \"/desmos-ast-viewer/\" + pathname);\r\n        }\r\n      );\r\n      return true;\r\n    }\r\n    const params = new URLSearchParams(location.search);\r\n    const state = params.get(\"state\");\r\n    if (state)\r\n      try {\r\n        calc.setState(tryDecode(state));\r\n        return true;\r\n      } catch {\r\n        return false;\r\n      }\r\n    if (params.has(\"latex\"))\r\n      try {\r\n        calc.setExpression(unflatten(params.entries(), x => fromDecoded(tryDecode(x))));\r\n        return true;\r\n      } catch {\r\n        return false;\r\n      }\r\n  })()\r\n)\r\n  calc.setExpression({ latex: \"x^{2}+y^{2}=10\" });\r\n\r\nfunction isExpression(\r\n  exp: Desmos.ExpressionState\r\n): exp is Exclude<Desmos.ExpressionState, { type: \"table\" }> & { latex: string } {\r\n  return (exp as any).latex;\r\n}\r\n\r\nfunction makeParams(exp: Desmos.ExpressionState) {\r\n  const params = new URLSearchParams();\r\n  flatten(exp, (key, value) => {\r\n    if (defaultExpressionState.get(key) !== value) params.set(key, value);\r\n  });\r\n  params.delete(\"type\");\r\n  params.delete(\"id\");\r\n  params.delete(\"hidden\");\r\n  params.delete(\"secret\");\r\n  return params;\r\n}\r\n\r\ncalc.observeEvent(\"change\", () => {\r\n  const state = calc.getState();\r\n  const expressions = calc.getExpressions().filter(isExpression); // (state as { expressions: { list: Desmos.ExpressionState[] } }).expressions.list\r\n  history.replaceState(\r\n    state,\r\n    document.title,\r\n    !expressions.length\r\n      ? \"/desmos-ast-viewer/\"\r\n      : expressions.length === 1\r\n      ? \"/desmos-ast-viewer/?\" + makeParams(expressions[0]!)\r\n      : \"/desmos-ast-viewer/?state=\" + encodeURIComponent(JSON.stringify(state))\r\n  );\r\n});\r\n\r\nconst count = document.getElementById(\"count\")!;\r\nconst tree = document.getElementById(\"tree\")!;\r\ncalc.observeEvent(\"change\", onChange);\r\nonChange();\r\n\r\nfunction onChange() {\r\n  const exp = calc.getExpressions().find(isExpression);\r\n  if (!exp) return onError();\r\n  tree.textContent = \"\";\r\n  const ul = document.createElement(\"ul\");\r\n  const node = parse(exp.latex, { allowDt: true, allowIndex: true });\r\n  if ((node as Error).isError) return onError();\r\n  ul.appendChild(recursion(node));\r\n  tree.appendChild(ul);\r\n  count.textContent = tree.getElementsByTagName(\"div\").length + \"\";\r\n}\r\n\r\nfunction onError() {\r\n  tree.textContent = \"\";\r\n  count.textContent = \"?\";\r\n}\r\n\r\nfunction recursion(node: Node): HTMLLIElement {\r\n  const li = document.createElement(\"li\");\r\n  const div = document.createElement(node.type === \"DoubleInequality\" ? \"span\" : \"div\");\r\n  const elementOrFn = display[node.type] as string | globalThis.Node | ((node: Node) => string | globalThis.Node);\r\n  const element = typeof elementOrFn === \"function\" ? elementOrFn(node) : elementOrFn;\r\n  div.textContent = \"\";\r\n  div.appendChild(typeof element === \"string\" ? document.createTextNode(element) : element);\r\n  li.appendChild(div);\r\n  const children = getChildren(node);\r\n  if (children.length) {\r\n    const ul = document.createElement(\"ul\");\r\n    children.forEach(child => ul.appendChild(recursion(child)));\r\n    li.appendChild(ul);\r\n  }\r\n  return li;\r\n}\r\n\r\nfunction getChildren(node: Node) {\r\n  switch (node.type) {\r\n    case \"Assignment\":\r\n      return [toIdentifier(node._symbol), node._expression];\r\n    case \"Derivative\":\r\n      return [toIdentifier(node._symbol), node.args[0]];\r\n    case \"FunctionDefinition\":\r\n      return [\r\n        { type: \"FunctionCall\", _symbol: node._symbol, args: node._argSymbols.map(toIdentifier) } as FunctionCall,\r\n        node._expression,\r\n      ];\r\n    case \"OrderedPairAccess\":\r\n      return [node.args[0], toIdentifier(node.args[1].scalarExprString() === \"1\" ? \"x\" : \"y\")];\r\n    case \"FunctionExponent\":\r\n      return [\r\n        { type: \"FunctionCall\", _symbol: node.args[0]._symbol, args: [node.args[1]] } as FunctionCall,\r\n        node.args[2],\r\n      ];\r\n    case \"FunctionFactorial\":\r\n      return [{ type: \"FunctionCall\", _symbol: node.args[0]._symbol, args: [node.args[1]] } as FunctionCall];\r\n    case \"Regression\":\r\n    case \"Equation\":\r\n      return [node._lhs, node._rhs];\r\n    case \"DoubleInequality\":\r\n      return \"args\" in node ? [node.args[0], node.args[2], node.args[4]] : [];\r\n    case \"Divide\":\r\n      return toFraction(node) ? [] : node.args;\r\n    case \"Negative\":\r\n      return (node.args[0].type === \"Identifier\" && node.args[0]._symbol === \"infty\") ||\r\n        (node.args[0].type === \"Divide\" && toFraction(node.args[0]))\r\n        ? []\r\n        : node.args;\r\n    case \"ListComprehension\":\r\n    case \"SeededFunctionCall\":\r\n      return node.args.slice(1);\r\n    default:\r\n      return \"args\" in node ? (node.args as ChildExprNode[]) : [];\r\n  }\r\n}\r\n\r\nfunction toIdentifier(str: string) {\r\n  return { type: \"Identifier\", _symbol: str } as Identifier;\r\n}\r\n\r\nfunction toFraction(node: Divide) {\r\n  const [nNode, dNode] = node.args;\r\n  if (nNode.type === \"Constant\" && dNode.type === \"Constant\") {\r\n    const n = constantToFraction(nNode);\r\n    const d = constantToFraction(dNode);\r\n    if (\r\n      typeof n === \"string\" &&\r\n      !n.includes(\".\") &&\r\n      !n.includes(\"e\") &&\r\n      typeof d === \"string\" &&\r\n      !d.includes(\".\") &&\r\n      !d.includes(\"e\")\r\n    )\r\n      return { n, d };\r\n  }\r\n}\r\n"],"names":["$f339051b1e92b412$var$_object","$f339051b1e92b412$var$_key","$f339051b1e92b412$export$bffa455ba8c619a6","object","callback","recursion","prefix","key","Object","prototype","hasOwnProperty","call","$f339051b1e92b412$export$4315a2af848d75d7","iterator","mapper","result","value","keys","split","last","pop","reduce","$f339051b1e92b412$export$6c0db405582032a5","str","decodeURIComponent","replace","$0ac4f7719cce94fd$var$display","Equation","Assignment","FunctionDefinition","Stats","BoxPlot","DotPlot","Histogram","IndependentTTest","TTest","Regression","Error","Constant","$0ac4f7719cce94fd$var$constantToFraction","MixedNumber","DotAccess","FunctionCall","$0ac4f7719cce94fd$var$symbolToElement","FunctionExponent","FunctionFactorial","Identifier","Integral","Derivative","Prime","node","repeat","order","List","Range","ListAccess","BareSeq","ParenSeq","UpdateRule","AssignmentExpression","ListComprehension","OrderedPairAccess","Piecewise","Product","Sum","SeededFunctionCall","Add","Subtract","Multiply","Divide","fraction","$0ac4f7719cce94fd$var$toFraction","_constantValue","Exponent","Negative","args","type","_symbol","And","Seed","ExtendSeed","DoubleInequality","fragment","document","createDocumentFragment","lhs","createElement","textContent","appendChild","rhs","createTextNode","sub","negate","n","d","sign","includes","diff","v","m","length","slice","className","numerator","denominator","isNaN","$0ac4f7719cce94fd$var$ListViewPrototype","Desmos","require","default","$0ac4f7719cce94fd$var$getClipboardData","$0ac4f7719cce94fd$var$prevPathname","$0ac4f7719cce94fd$var$oldOnPaste","onPaste","e","this","$0ac4f7719cce94fd$var$parse","parse","$0ac4f7719cce94fd$var$calc","GraphingCalculator","getElementById","pasteGraphLink","pasteGraphLinkCallback","s","t","match","exec","history","replaceState","title","self","Calc","focusFirstExpression","$0ac4f7719cce94fd$var$defaultExpressionState","Map","$0ac4f7719cce94fd$var$isExpression","exp","latex","getExpressions","set","delete","pathname","location","controller","params","URLSearchParams","search","state","get","setState","has","setExpression","entries","x","observeEvent","getState","expressions","filter","$0ac4f7719cce94fd$var$makeParams","encodeURIComponent","JSON","stringify","$0ac4f7719cce94fd$var$count","$0ac4f7719cce94fd$var$tree","$0ac4f7719cce94fd$var$onChange","find","$0ac4f7719cce94fd$var$onError","ul","allowDt","allowIndex","isError","$0ac4f7719cce94fd$var$recursion","getElementsByTagName","li","div","elementOrFn","element","children","$0ac4f7719cce94fd$var$toIdentifier","_expression","_argSymbols","map","scalarExprString","_lhs","_rhs","$0ac4f7719cce94fd$var$getChildren","forEach","child","nNode","dNode"],"version":3,"file":"index.8390ce9e.js.map"}